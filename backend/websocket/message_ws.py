from fastapi import APIRouter, WebSocket, WebSocketDisconnect, Depends
from typing import Dict, List
from sqlalchemy.orm import Session
from sqlalchemy import text
from database import get_db
from auth.jwt_handler import verify_access_token  # ‚úÖ ƒë·ªïi ƒë√∫ng h√†m x√°c th·ª±c JWT
import json

router = APIRouter(prefix="/ws", tags=["WebSocket Chat"])

# match_id ‚Üí list[{"ws": WebSocket, "user_id": int}]
active_connections: Dict[int, List[dict]] = {}


# ----------------------------- #
#  K·∫æT N·ªêI / NG·∫ÆT K·∫æT N·ªêI
# ----------------------------- #
async def connect_client(match_id: int, websocket: WebSocket, user_id: int):
    """Th√™m client v√†o danh s√°ch k·∫øt n·ªëi"""
    await websocket.accept()
    if match_id not in active_connections:
        active_connections[match_id] = []
    active_connections[match_id].append({"ws": websocket, "user_id": user_id})
    print(f"üîå Client {user_id} joined match {match_id}. Total: {len(active_connections[match_id])}")


def remove_client(match_id: int, websocket: WebSocket):
    """Xo√° client khi ng·∫Øt k·∫øt n·ªëi"""
    if match_id in active_connections:
        active_connections[match_id] = [
            c for c in active_connections[match_id] if c["ws"] != websocket
        ]
        if not active_connections[match_id]:
            del active_connections[match_id]
    print(f"‚ùå Client left match {match_id}")


async def broadcast_message(match_id: int, message: dict):
    """G·ª≠i tin nh·∫Øn t·ªõi t·∫•t c·∫£ client trong match"""
    if match_id in active_connections:
        for conn in active_connections[match_id]:
            try:
                # G·∫Øn c·ªù "is_me" ƒë·ªÉ ph√¢n bi·ªát b√™n g·ª≠i / nh·∫≠n
                message["is_me"] = conn["user_id"] == message["sender_id"]
                await conn["ws"].send_text(json.dumps(message))
            except Exception as e:
                print(f"‚ö†Ô∏è Send error: {e}")


# ----------------------------- #
#  ROUTE WEBSOCKET CH√çNH
# ----------------------------- #
@router.websocket("/chat/{match_id}")
async def chat_ws(websocket: WebSocket, match_id: int, db: Session = Depends(get_db)):
    # ‚úÖ L·∫•y token t·ª´ query string (frontend g·ª≠i ?token=...)
    token = websocket.query_params.get("token")
    if not token:
        await websocket.close(code=4001)
        return

    # ‚úÖ X√°c th·ª±c token
    payload = verify_access_token(token)
    if not payload:
        await websocket.close(code=403)
        return

    email = payload.get("sub")
    if not email:
        await websocket.close(code=403)
        return

    # ‚úÖ L·∫•y user t·ª´ DB theo email
    user = db.execute(
        text("SELECT user_id, full_name FROM users WHERE email = :email"),
        {"email": email},
    ).fetchone()

    if not user:
        await websocket.close(code=403)
        return

    # ‚úÖ Cho ph√©p k·∫øt n·ªëi
    await connect_client(match_id, websocket, user.user_id)

    try:
        while True:
            data = await websocket.receive_text()
            payload = json.loads(data)
            content = payload.get("content", "").strip()
            msg_type = payload.get("type", "text")

            if not content:
                continue

            # ‚úÖ L∆∞u v√†o DB
            db.execute(
                text("""
                    INSERT INTO messages (match_id, sender_id, content, type)
                    VALUES (:mid, :sid, :content, :type)
                """),
                {"mid": match_id, "sid": user.user_id, "content": content, "type": msg_type},
            )
            db.commit()

            # ‚úÖ G·ª≠i realtime t·ªõi c√°c client c√πng match
            message_data = {
                "sender_id": user.user_id,
                "sender_name": user.full_name,
                "content": content,
                "type": msg_type,
            }
            await broadcast_message(match_id, message_data)

    except WebSocketDisconnect:
        remove_client(match_id, websocket)
