from fastapi import APIRouter, Depends, HTTPException
from sqlalchemy.orm import Session
from sqlalchemy import text
from database import get_db
from models.user_model import User
from auth.dependencies import get_current_user

router = APIRouter(prefix="/messages", tags=["Messages"])

# üì® L·∫•y danh s√°ch tin nh·∫Øn trong m·ªôt match
@router.get("/{match_id}")
def get_messages(
    match_id: int,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user),
):
    # ‚úÖ Ki·ªÉm tra xem user c√≥ thu·ªôc match n√†y kh√¥ng
    match = db.execute(
        text("""
        SELECT * FROM matches
        WHERE match_id = :mid 
        AND (user1_id = :uid OR user2_id = :uid)
    """),
        {"mid": match_id, "uid": current_user.user_id},
    ).fetchone()

    if not match:
        raise HTTPException(
            status_code=403, detail="B·∫°n kh√¥ng c√≥ quy·ªÅn xem cu·ªôc tr√≤ chuy·ªán n√†y"
        )

    # ‚úÖ L·∫•y danh s√°ch tin nh·∫Øn k√®m flag 'is_me'
    sql = text("""
        SELECT 
            m.message_id,
            m.sender_id,
            u.full_name AS sender_name,
            p.url AS sender_avatar,
            m.content,
            m.type,
            m.created_at,
            CASE WHEN m.sender_id = :uid THEN TRUE ELSE FALSE END AS is_me
        FROM messages m
        JOIN users u ON u.user_id = m.sender_id
        LEFT JOIN photos p ON u.user_id = p.user_id AND p.is_avatar = 1
        WHERE m.match_id = :mid
        ORDER BY m.created_at ASC
    """)

    rows = db.execute(sql, {"mid": match_id, "uid": current_user.user_id}).fetchall()
    return [dict(r._mapping) for r in rows]


# üí¨ G·ª≠i tin nh·∫Øn m·ªõi (text)
@router.post("/{match_id}")
def send_message(
    match_id: int,
    data: dict,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user),
):
    content = data.get("content", "").strip()
    if not content:
        raise HTTPException(status_code=400, detail="N·ªôi dung kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng")

    # ‚úÖ Ki·ªÉm tra xem user c√≥ thu·ªôc match n√†y kh√¥ng
    match = db.execute(
        text("""
        SELECT * FROM matches
        WHERE match_id = :mid 
        AND (user1_id = :uid OR user2_id = :uid)
    """),
        {"mid": match_id, "uid": current_user.user_id},
    ).fetchone()

    if not match:
        raise HTTPException(
            status_code=403, detail="B·∫°n kh√¥ng th·ªÉ g·ª≠i tin trong cu·ªôc tr√≤ chuy·ªán n√†y"
        )

    # ‚ö†Ô∏è KH√îNG l∆∞u tin nh·∫Øn ·ªü ƒë√¢y n·ªØa (ƒë√£ ƒë∆∞·ª£c WebSocket x·ª≠ l√Ω)
    # Ch·ªâ tr·∫£ v·ªÅ x√°c nh·∫≠n OK ƒë·ªÉ frontend kh√¥ng l·ªói
    return {"message": "Tin nh·∫Øn ƒë√£ g·ª≠i qua WebSocket realtime!"}
